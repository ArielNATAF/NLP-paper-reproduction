Extracted all features: 
Printing class statistics
Counter({'A2': 188, 'B1': 165, 'B2': 81})
With Word ngrams: 
 ******
Printing results for: RandomForestClassifier(class_weight='balanced', n_estimators=300,
                       random_state=1234)CountVectorizer(min_df=10, ngram_range=(1, 5))
1161
1161
[0.77272727 0.72727273 0.77272727 0.70454545 0.79069767 0.72093023
 0.76744186 0.69767442 0.72093023 0.58139535]
0.7256342494714588 0.7203943668913373
[[  0   0   0   0   0   0]
 [  0 167  21   0   0   0]
 [  0  44 101  20   0   0]
 [  0   0  34  47   0   0]
 [  0   0   0   0   0   0]
 [  0   0   0   0   0   0]]
Printing results for: LinearSVC(class_weight='balanced', random_state=1234)CountVectorizer(min_df=10, ngram_range=(1, 5))
1161
1161
[0.77272727 0.72727273 0.61363636 0.68181818 0.76744186 0.72093023
 0.55813953 0.62790698 0.81395349 0.72093023]
0.7004756871035941 0.6979435028984214
[[  0   0   0   0   0   0]
 [  0 156  31   1   0   0]
 [  0  43  96  26   0   0]
 [  0   0  29  52   0   0]
 [  0   0   0   0   0   0]
 [  0   0   0   0   0   0]]
Printing results for: LogisticRegression(class_weight='balanced', max_iter=200, random_state=1234)CountVectorizer(min_df=10, ngram_range=(1, 5))
1161
1161
[0.79545455 0.70454545 0.72727273 0.68181818 0.72093023 0.74418605
 0.62790698 0.76744186 0.79069767 0.74418605]
0.7304439746300211 0.7280292674482461
[[  0   0   0   0   0   0]
 [  0 163  24   1   0   0]
 [  0  35 102  28   0   0]
 [  0   0  29  52   0   0]
 [  0   0   0   0   0   0]
 [  0   0   0   0   0   0]]
SAME LANG EVAL DONE FOR THIS LANG
With POS ngrams:  
 ******
Printing results for: RandomForestClassifier(class_weight='balanced', n_estimators=300,
                       random_state=1234)CountVectorizer(min_df=10, ngram_range=(1, 5))
3975
3975
[0.77272727 0.65909091 0.75       0.70454545 0.74418605 0.74418605
 0.65116279 0.79069767 0.65116279 0.6744186 ]
0.7142177589852008 0.7077411820314735
[[  0   0   0   0   0   0]
 [  0 162  26   0   0   0]
 [  0  40 112  13   0   0]
 [  0   1  44  36   0   0]
 [  0   0   0   0   0   0]
 [  0   0   0   0   0   0]]
Printing results for: LinearSVC(class_weight='balanced', random_state=1234)CountVectorizer(min_df=10, ngram_range=(1, 5))
3975
3975
[0.72727273 0.56818182 0.52272727 0.56818182 0.60465116 0.6744186
 0.53488372 0.53488372 0.58139535 0.51162791]
0.5828224101479915 0.5784415197793937
[[  0   0   0   0   0   0]
 [  0 138  47   3   0   0]
 [  0  62  74  29   0   0]
 [  0   7  33  41   0   0]
 [  0   0   0   0   0   0]
 [  0   0   0   0   0   0]]
Printing results for: LogisticRegression(class_weight='balanced', max_iter=200, random_state=1234)CountVectorizer(min_df=10, ngram_range=(1, 5))
3975
3975
[0.72727273 0.70454545 0.52272727 0.56818182 0.62790698 0.69767442
 0.6744186  0.62790698 0.53488372 0.58139535]
0.62669133192389 0.6248086093798032
[[  0   0   0   0   0   0]
 [  0 147  39   2   0   0]
 [  0  47  81  37   0   0]
 [  0   0  37  44   0   0]
 [  0   0   0   0   0   0]
 [  0   0   0   0   0   0]]
SAME LANG EVAL DONE FOR THIS LANG
Dep ngrams:  
 ******
Printing results for: RandomForestClassifier(class_weight='balanced', n_estimators=300,
                       random_state=1234)CountVectorizer(min_df=10, ngram_range=(1, 5))
2943
2943
[0.77272727 0.77272727 0.68181818 0.65909091 0.72093023 0.76744186
 0.72093023 0.76744186 0.69767442 0.69767442]
0.725845665961945 0.7203956803185428
[[  0   0   0   0   0   0]
 [  0 163  25   0   0   0]
 [  0  39 113  13   0   0]
 [  0   1  41  39   0   0]
 [  0   0   0   0   0   0]
 [  0   0   0   0   0   0]]
Printing results for: LinearSVC(class_weight='balanced', random_state=1234)CountVectorizer(min_df=10, ngram_range=(1, 5))
2943
2943
[0.77272727 0.56818182 0.61363636 0.47727273 0.72093023 0.60465116
 0.6744186  0.60465116 0.62790698 0.46511628]
0.6129492600422833 0.6092536382558326
[[  0   0   0   0   0   0]
 [  0 140  47   1   0   0]
 [  0  60  78  27   0   0]
 [  0   5  28  48   0   0]
 [  0   0   0   0   0   0]
 [  0   0   0   0   0   0]]
Printing results for: LogisticRegression(class_weight='balanced', max_iter=200, random_state=1234)CountVectorizer(min_df=10, ngram_range=(1, 5))
2943
2943
[0.75       0.68181818 0.65909091 0.54545455 0.8372093  0.6744186
 0.65116279 0.6744186  0.6744186  0.46511628]
0.6613107822410149 0.6606235887341878
[[  0   0   0   0   0   0]
 [  0 148  39   1   0   0]
 [  0  41  90  34   0   0]
 [  0   1  31  49   0   0]
 [  0   0   0   0   0   0]
 [  0   0   0   0   0   0]]
SAME LANG EVAL DONE FOR THIS LANG
Domain features:  
 ******
RandomForestClassifier(class_weight='balanced', n_estimators=300,
                       random_state=1234)
[0.75       0.70454545 0.72727273 0.65909091 0.72093023 0.72093023
 0.65116279 0.69767442 0.65116279 0.65116279]
0.6933932346723045
[[163  23   2]
 [ 46  97  22]
 [  1  39  41]]
0.6598349150340461
LinearSVC(class_weight='balanced', random_state=1234)
[0.45454545 0.63636364 0.40909091 0.61363636 0.41860465 0.60465116
 0.46511628 0.74418605 0.62790698 0.51162791]
0.5485729386892177
[[127  43  18]
 [ 39  82  44]
 [  9  43  29]]
0.5098087709081366
LogisticRegression(class_weight='balanced', max_iter=200, random_state=1234)
[0.68181818 0.65909091 0.72727273 0.70454545 0.6744186  0.69767442
 0.51162791 0.76744186 0.62790698 0.65116279]
0.6702959830866808
[[162  24   2]
 [ 45  67  53]
 [  1  18  62]]
0.6444985131116517
Combined feature rep: wordngrams + domain
Acc:  0.7324524312896407
F1:  0.7438418473300773
Combined feature rep: posngrams + domain
Acc:  0.7140591966173362
F1:  0.7085325450580571
Combined feature rep: depngrams + domain
Acc:  0.7302325581395348
F1:  0.7320660201973195
