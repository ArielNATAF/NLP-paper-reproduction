Language Features True
Doing: take all data as if it belongs to one large dataset, and do classification
Mega classification for:  word  features
2267 2267 2267 135
Distribution of labels: 
Counter({'B1': 890, 'A2': 875, 'B2': 374, 'A1': 86, 'C1': 42})
setting: word
Printing results for: RandomForestClassifier(class_weight='balanced', n_estimators=300,
                       random_state=1234)CountVectorizer(min_df=10, ngram_range=(1, 5))
7231
7234
[0.78854626 0.76651982 0.74008811 0.75770925 0.73127753 0.72687225
 0.77973568 0.74778761 0.71681416 0.77876106]
Mean: 0.7534111730536821
F1: 0.7388567064585638
[[ 21  65   0   0   0   0]
 [  7 774  93   1   0   0]
 [  0 192 602  96   0   0]
 [  0   5  58 311   0   0]
 [  0   0   0  42   0   0]
 [  0   0   0   0   0   0]]
Printing results for: LinearSVC(class_weight='balanced', random_state=1234)CountVectorizer(min_df=10, ngram_range=(1, 5))
7231
7234
[0.7092511  0.72687225 0.63876652 0.74889868 0.68281938 0.67400881
 0.71365639 0.71238938 0.72123894 0.72566372]
Mean: 0.7053565163151533
F1: 0.7023334330998977
[[ 33  49   4   0   0   0]
 [ 40 680 150   5   0   0]
 [  4 187 622  75   2   0]
 [  0   5  93 258  18   0]
 [  0   1   3  32   6   0]
 [  0   0   0   0   0   0]]
Printing results for: LogisticRegression(class_weight='balanced', random_state=1234)CountVectorizer(min_df=10, ngram_range=(1, 5))
7231
7234
[0.73127753 0.74889868 0.70484581 0.75330396 0.72246696 0.69162996
 0.74008811 0.72123894 0.7079646  0.71238938]
Mean: 0.7234103933569841
F1: 0.7227091380580072
[[ 40  43   3   0   0   0]
 [ 55 691 126   3   0   0]
 [  2 177 624  86   1   0]
 [  0   3  73 276  22   0]
 [  0   0   2  31   9   0]
 [  0   0   0   0   0   0]]
SAME LANG EVAL DONE FOR THIS LANG

------------

Language Features False
Doing: take all data as if it belongs to one large dataset, and do classification
Mega classification for:  word  features
2267 2267 2267 135
Distribution of labels: 
Counter({'B1': 890, 'A2': 875, 'B2': 374, 'A1': 86, 'C1': 42})
setting: word
Printing results for: RandomForestClassifier(class_weight='balanced', n_estimators=300,
                       random_state=1234)CountVectorizer(min_df=10, ngram_range=(1, 5))
7231
7231
[0.76651982 0.74889868 0.73127753 0.76651982 0.71365639 0.73127753
 0.75770925 0.73893805 0.71238938 0.78318584]
Mean: 0.7450372305173287
F1: 0.7296241359231191
[[ 19  66   1   0   0   0]
 [  6 774  95   0   0   0]
 [  0 198 588 104   0   0]
 [  0   6  60 308   0   0]
 [  0   0   0  42   0   0]
 [  0   0   0   0   0   0]]
Printing results for: LinearSVC(class_weight='balanced', random_state=1234)CountVectorizer(min_df=10, ngram_range=(1, 5))
7231
7231
[0.7092511  0.72687225 0.63876652 0.75770925 0.67400881 0.66079295
 0.7092511  0.71238938 0.7300885  0.7300885 ]
Mean: 0.704921835406027
F1: 0.7018703051829592
[[ 32  50   4   0   0   0]
 [ 39 678 154   4   0   0]
 [  4 186 624  74   2   0]
 [  0   5  95 257  17   0]
 [  0   1   3  31   7   0]
 [  0   0   0   0   0   0]]
Printing results for: LogisticRegression(class_weight='balanced', random_state=1234)CountVectorizer(min_df=10, ngram_range=(1, 5))
7231
7231
[0.73568282 0.76651982 0.70044053 0.75330396 0.72687225 0.68722467
 0.74449339 0.72123894 0.70353982 0.71681416]
Mean: 0.7256130365287904
F1: 0.7249668756738472
[[ 42  42   2   0   0   0]
 [ 51 696 125   3   0   0]
 [  3 174 624  87   2   0]
 [  0   3  74 274  23   0]
 [  0   0   2  31   9   0]
 [  0   0   0   0   0   0]]
SAME LANG EVAL DONE FOR THIS LANG
